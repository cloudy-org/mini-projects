import {
  __commonJS
} from "./chunk-BUSYA2B4.js";

// node_modules/.pnpm/@neutralinojs+lib@5.5.0/node_modules/@neutralinojs/lib/dist/index.js
var require_dist = __commonJS({
  "node_modules/.pnpm/@neutralinojs+lib@5.5.0/node_modules/@neutralinojs/lib/dist/index.js"(exports) {
    function e(e2, t2, n2, o2) {
      return new (n2 || (n2 = Promise))(function(r2, i2) {
        function s2(e3) {
          try {
            c2(o2.next(e3));
          } catch (e4) {
            i2(e4);
          }
        }
        function a2(e3) {
          try {
            c2(o2.throw(e3));
          } catch (e4) {
            i2(e4);
          }
        }
        function c2(e3) {
          var t3;
          e3.done ? r2(e3.value) : (t3 = e3.value, t3 instanceof n2 ? t3 : new n2(function(e4) {
            e4(t3);
          })).then(s2, a2);
        }
        c2((o2 = o2.apply(e2, t2 || [])).next());
      });
    }
    function t() {
      return f("extensions.getStats");
    }
    var n = Object.freeze({ __proto__: null, broadcast: function(e2, t2) {
      return f("extensions.broadcast", { event: e2, data: t2 });
    }, dispatch: function(n2, o2, r2) {
      return new Promise((i2, s2) => e(this, void 0, void 0, function* () {
        const e2 = yield t();
        if (e2.loaded.includes(n2)) if (e2.connected.includes(n2)) try {
          const e3 = yield f("extensions.dispatch", { extensionId: n2, event: o2, data: r2 });
          i2(e3);
        } catch (e3) {
          s2(e3);
        }
        else !function(e3, t2) {
          e3 in d ? d[e3].push(t2) : d[e3] = [t2];
        }(n2, { method: "extensions.dispatch", data: { extensionId: n2, event: o2, data: r2 }, resolve: i2, reject: s2 });
        else s2({ code: "NE_EX_EXTNOTL", message: `${n2} is not loaded` });
      }));
    }, getStats: t });
    function o(e2, t2) {
      return window.addEventListener(e2, t2), Promise.resolve({ success: true, message: "Event listener added" });
    }
    function r(e2, t2) {
      const n2 = new CustomEvent(e2, { detail: t2 });
      return window.dispatchEvent(n2), Promise.resolve({ success: true, message: "Message dispatched" });
    }
    function i(e2) {
      const t2 = window.atob(e2), n2 = t2.length, o2 = new Uint8Array(n2);
      for (let e3 = 0; e3 < n2; e3++) o2[e3] = t2.charCodeAt(e3);
      return o2.buffer;
    }
    function s(e2) {
      let t2 = new Uint8Array(e2), n2 = "";
      for (let e3 of t2) n2 += String.fromCharCode(e3);
      return window.btoa(n2);
    }
    var a;
    var c = {};
    var u = [];
    var d = {};
    function l() {
      window.NL_TOKEN && sessionStorage.setItem("NL_TOKEN", window.NL_TOKEN);
      const n2 = w().split(".")[1], s2 = window.NL_GINJECTED || window.NL_CINJECTED ? "localhost" : window.location.hostname;
      a = new WebSocket(`ws://${s2}:${window.NL_PORT}?connectToken=${n2}`), function() {
        if (o("ready", () => e(this, void 0, void 0, function* () {
          if (yield p(u), !window.NL_EXTENABLED) return;
          const e2 = yield t();
          for (const t2 of e2.connected) r("extensionReady", t2);
        })), o("extClientConnect", (e2) => {
          r("extensionReady", e2.detail);
        }), !window.NL_EXTENABLED) return;
        o("extensionReady", (t2) => e(this, void 0, void 0, function* () {
          t2.detail in d && (yield p(d[t2.detail]), delete d[t2.detail]);
        }));
      }(), function() {
        a.addEventListener("message", (e2) => {
          var t2, n3, o2;
          const s3 = JSON.parse(e2.data);
          s3.id && s3.id in c ? ((null === (t2 = s3.data) || void 0 === t2 ? void 0 : t2.error) ? (c[s3.id].reject(s3.data.error), "NE_RT_INVTOKN" == s3.data.error.code && (a.close(), document.body.innerText = "", document.write("<code>NE_RT_INVTOKN</code>: Neutralinojs application cannot execute native methods since <code>NL_TOKEN</code> is invalid."))) : (null === (n3 = s3.data) || void 0 === n3 ? void 0 : n3.success) && c[s3.id].resolve(s3.data.hasOwnProperty("returnValue") ? s3.data.returnValue : s3.data), delete c[s3.id]) : s3.event && ("openedFile" == s3.event && "dataBinary" == (null === (o2 = null == s3 ? void 0 : s3.data) || void 0 === o2 ? void 0 : o2.action) && (s3.data.data = i(s3.data.data)), r(s3.event, s3.data));
        }), a.addEventListener("open", (t2) => e(this, void 0, void 0, function* () {
          r("ready");
        })), a.addEventListener("close", (t2) => e(this, void 0, void 0, function* () {
          r("serverOffline", { code: "NE_CL_NSEROFF", message: "Neutralino server is offline. Try restarting the application" });
        })), a.addEventListener("error", (t2) => e(this, void 0, void 0, function* () {
          document.body.innerText = "", document.write("<code>NE_CL_IVCTOKN</code>: Neutralinojs application cannot connect with the framework core using <code>NL_TOKEN</code>.");
        }));
      }();
    }
    function f(e2, t2) {
      return new Promise((n2, o2) => {
        if ((null == a ? void 0 : a.readyState) != WebSocket.OPEN) return r2 = { method: e2, data: t2, resolve: n2, reject: o2 }, void u.push(r2);
        var r2;
        const i2 = "10000000-1000-4000-8000-100000000000".replace(/[018]/g, (e3) => (e3 ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> e3 / 4).toString(16)), s2 = w();
        c[i2] = { resolve: n2, reject: o2 }, a.send(JSON.stringify({ id: i2, method: e2, data: t2, accessToken: s2 }));
      });
    }
    function p(t2) {
      return e(this, void 0, void 0, function* () {
        for (; t2.length > 0; ) {
          const e2 = t2.shift();
          try {
            const t3 = yield f(e2.method, e2.data);
            e2.resolve(t3);
          } catch (t3) {
            e2.reject(t3);
          }
        }
      });
    }
    function w() {
      return window.NL_TOKEN || sessionStorage.getItem("NL_TOKEN") || "";
    }
    function g(e2, t2) {
      return f("filesystem.writeBinaryFile", { path: e2, data: s(t2) });
    }
    var m = Object.freeze({ __proto__: null, appendBinaryFile: function(e2, t2) {
      return f("filesystem.appendBinaryFile", { path: e2, data: s(t2) });
    }, appendFile: function(e2, t2) {
      return f("filesystem.appendFile", { path: e2, data: t2 });
    }, copy: function(e2, t2, n2) {
      return f("filesystem.copy", Object.assign({ source: e2, destination: t2 }, n2));
    }, createDirectory: function(e2) {
      return f("filesystem.createDirectory", { path: e2 });
    }, createWatcher: function(e2) {
      return f("filesystem.createWatcher", { path: e2 });
    }, getAbsolutePath: function(e2) {
      return f("filesystem.getAbsolutePath", { path: e2 });
    }, getOpenedFileInfo: function(e2) {
      return f("filesystem.getOpenedFileInfo", { id: e2 });
    }, getPathParts: function(e2) {
      return f("filesystem.getPathParts", { path: e2 });
    }, getRelativePath: function(e2, t2) {
      return f("filesystem.getRelativePath", { path: e2, base: t2 });
    }, getStats: function(e2) {
      return f("filesystem.getStats", { path: e2 });
    }, getWatchers: function() {
      return f("filesystem.getWatchers");
    }, move: function(e2, t2) {
      return f("filesystem.move", { source: e2, destination: t2 });
    }, openFile: function(e2) {
      return f("filesystem.openFile", { path: e2 });
    }, readBinaryFile: function(e2, t2) {
      return new Promise((n2, o2) => {
        f("filesystem.readBinaryFile", Object.assign({ path: e2 }, t2)).then((e3) => {
          n2(i(e3));
        }).catch((e3) => {
          o2(e3);
        });
      });
    }, readDirectory: function(e2, t2) {
      return f("filesystem.readDirectory", Object.assign({ path: e2 }, t2));
    }, readFile: function(e2, t2) {
      return f("filesystem.readFile", Object.assign({ path: e2 }, t2));
    }, remove: function(e2) {
      return f("filesystem.remove", { path: e2 });
    }, removeWatcher: function(e2) {
      return f("filesystem.removeWatcher", { id: e2 });
    }, updateOpenedFile: function(e2, t2, n2) {
      return f("filesystem.updateOpenedFile", { id: e2, event: t2, data: n2 });
    }, writeBinaryFile: g, writeFile: function(e2, t2) {
      return f("filesystem.writeFile", { path: e2, data: t2 });
    } });
    function v(e2, t2) {
      return f("os.execCommand", Object.assign({ command: e2 }, t2));
    }
    var h = Object.freeze({ __proto__: null, execCommand: v, getEnv: function(e2) {
      return f("os.getEnv", { key: e2 });
    }, getEnvs: function() {
      return f("os.getEnvs");
    }, getPath: function(e2) {
      return f("os.getPath", { name: e2 });
    }, getSpawnedProcesses: function() {
      return f("os.getSpawnedProcesses");
    }, open: function(e2) {
      return f("os.open", { url: e2 });
    }, setTray: function(e2) {
      return f("os.setTray", e2);
    }, showFolderDialog: function(e2, t2) {
      return f("os.showFolderDialog", Object.assign({ title: e2 }, t2));
    }, showMessageBox: function(e2, t2, n2, o2) {
      return f("os.showMessageBox", { title: e2, content: t2, choice: n2, icon: o2 });
    }, showNotification: function(e2, t2, n2) {
      return f("os.showNotification", { title: e2, content: t2, icon: n2 });
    }, showOpenDialog: function(e2, t2) {
      return f("os.showOpenDialog", Object.assign({ title: e2 }, t2));
    }, showSaveDialog: function(e2, t2) {
      return f("os.showSaveDialog", Object.assign({ title: e2 }, t2));
    }, spawnProcess: function(e2, t2) {
      return f("os.spawnProcess", { command: e2, cwd: t2 });
    }, updateSpawnedProcess: function(e2, t2, n2) {
      return f("os.updateSpawnedProcess", { id: e2, event: t2, data: n2 });
    } });
    var _ = Object.freeze({ __proto__: null, getArch: function() {
      return f("computer.getArch");
    }, getCPUInfo: function() {
      return f("computer.getCPUInfo");
    }, getDisplays: function() {
      return f("computer.getDisplays");
    }, getKernelInfo: function() {
      return f("computer.getKernelInfo");
    }, getMemoryInfo: function() {
      return f("computer.getMemoryInfo");
    }, getMousePosition: function() {
      return f("computer.getMousePosition");
    }, getOSInfo: function() {
      return f("computer.getOSInfo");
    } });
    var y = Object.freeze({ __proto__: null, getData: function(e2) {
      return f("storage.getData", { key: e2 });
    }, getKeys: function() {
      return f("storage.getKeys");
    }, setData: function(e2, t2) {
      return f("storage.setData", { key: e2, data: t2 });
    } });
    function O(e2, t2) {
      return f("debug.log", { message: e2, type: t2 });
    }
    var E = Object.freeze({ __proto__: null, log: O });
    function b(e2) {
      return f("app.exit", { code: e2 });
    }
    var N = Object.freeze({ __proto__: null, broadcast: function(e2, t2) {
      return f("app.broadcast", { event: e2, data: t2 });
    }, exit: b, getConfig: function() {
      return f("app.getConfig");
    }, killProcess: function() {
      return f("app.killProcess");
    }, readProcessInput: function(e2) {
      return f("app.readProcessInput", { readAll: e2 });
    }, restartProcess: function(t2) {
      return new Promise((n2) => e(this, void 0, void 0, function* () {
        let e2 = window.NL_ARGS.reduce((e3, t3) => (t3.includes(" ") && (t3 = `"${t3}"`), e3 += " " + t3), "");
        (null == t2 ? void 0 : t2.args) && (e2 += " " + t2.args), yield v(e2, { background: true }), b(), n2();
      }));
    }, writeProcessError: function(e2) {
      return f("app.writeProcessError", { data: e2 });
    }, writeProcessOutput: function(e2) {
      return f("app.writeProcessOutput", { data: e2 });
    } });
    var P = /* @__PURE__ */ new WeakMap();
    function x(e2, t2) {
      return f("window.move", { x: e2, y: t2 });
    }
    function T() {
      return f("window.getSize");
    }
    var D = Object.freeze({ __proto__: null, center: function() {
      return f("window.center");
    }, create: function(e2, t2) {
      return new Promise((n2, o2) => {
        function r2(e3) {
          return "string" != typeof e3 || (e3 = e3.trim()).includes(" ") && (e3 = `"${e3}"`), e3;
        }
        t2 = Object.assign(Object.assign({}, t2), { useSavedState: false });
        let i2 = window.NL_ARGS.reduce((e3, t3, n3) => ((t3.includes("--path=") || t3.includes("--debug-mode") || t3.includes("--load-dir-res") || 0 == n3) && (e3 += " " + r2(t3)), e3), "");
        i2 += " --url=" + r2(e2);
        for (let e3 in t2) {
          if ("processArgs" == e3) continue;
          i2 += ` --window${"-" + e3.replace(/([a-z])([A-Z])/g, "$1-$2").toLowerCase()}=${r2(t2[e3])}`;
        }
        t2 && t2.processArgs && (i2 += " " + t2.processArgs), v(i2, { background: true }).then((e3) => {
          n2(e3);
        }).catch((e3) => {
          o2(e3);
        });
      });
    }, exitFullScreen: function() {
      return f("window.exitFullScreen");
    }, focus: function() {
      return f("window.focus");
    }, getPosition: function() {
      return f("window.getPosition");
    }, getSize: T, getTitle: function() {
      return f("window.getTitle");
    }, hide: function() {
      return f("window.hide");
    }, isFullScreen: function() {
      return f("window.isFullScreen");
    }, isMaximized: function() {
      return f("window.isMaximized");
    }, isMinimized: function() {
      return f("window.isMinimized");
    }, isVisible: function() {
      return f("window.isVisible");
    }, maximize: function() {
      return f("window.maximize");
    }, minimize: function() {
      return f("window.minimize");
    }, move: x, setAlwaysOnTop: function(e2) {
      return f("window.setAlwaysOnTop", { onTop: e2 });
    }, setDraggableRegion: function(t2, n2 = {}) {
      return new Promise((o2, r2) => {
        const i2 = t2 instanceof Element ? t2 : document.getElementById(t2);
        let s2 = 0, a2 = 0, c2 = 0, u2 = false, d2 = performance.now(), l2 = n2.alwaysCapture;
        if (!i2) return r2({ code: "NE_WD_DOMNOTF", message: "Unable to find DOM element" });
        if (P.has(i2)) return r2({ code: "NE_WD_ALRDREL", message: "This DOM element is already an active draggable region" });
        function f2(t3) {
          return e(this, void 0, void 0, function* () {
            var e2;
            const o3 = t3.clientX - s2, r3 = t3.clientY - a2;
            if (c2 = Math.sqrt(o3 * o3 + r3 * r3), c2 >= (null !== (e2 = n2.dragMinDistance) && void 0 !== e2 ? e2 : 10) && (u2 = true, l2 || (i2.setPointerCapture(t3.pointerId), l2 = true)), u2) {
              const e3 = performance.now(), n3 = e3 - d2;
              if (n3 < 5) return;
              return d2 = e3 - (n3 - 5), void (yield x(t3.screenX - s2, t3.screenY - a2));
            }
          });
        }
        function p2(e2) {
          0 === e2.button && (s2 = e2.clientX, a2 = e2.clientY, i2.addEventListener("pointermove", f2), n2.alwaysCapture && i2.setPointerCapture(e2.pointerId));
        }
        function w2(e2) {
          i2.removeEventListener("pointermove", f2), i2.releasePointerCapture(e2.pointerId);
        }
        i2.addEventListener("pointerdown", p2), i2.addEventListener("pointerup", w2), i2.addEventListener("pointercancel", w2), P.set(i2, { pointerdown: p2, pointerup: w2 }), o2({ success: true, message: "Draggable region was activated" });
      });
    }, setFullScreen: function() {
      return f("window.setFullScreen");
    }, setIcon: function(e2) {
      return f("window.setIcon", { icon: e2 });
    }, setSize: function(t2) {
      return new Promise((n2, o2) => e(this, void 0, void 0, function* () {
        let e2 = yield T();
        f("window.setSize", t2 = Object.assign(Object.assign({}, e2), t2)).then((e3) => {
          n2(e3);
        }).catch((e3) => {
          o2(e3);
        });
      }));
    }, setTitle: function(e2) {
      return f("window.setTitle", { title: e2 });
    }, show: function() {
      return f("window.show");
    }, unmaximize: function() {
      return f("window.unmaximize");
    }, unminimize: function() {
      return f("window.unminimize");
    }, unsetDraggableRegion: function(e2) {
      return new Promise((t2, n2) => {
        const o2 = e2 instanceof Element ? e2 : document.getElementById(e2);
        if (!o2) return n2({ code: "NE_WD_DOMNOTF", message: "Unable to find DOM element" });
        if (!P.has(o2)) return n2({ code: "NE_WD_NOTDRRE", message: "DOM element is not an active draggable region" });
        const { pointerdown: r2, pointerup: i2 } = P.get(o2);
        o2.removeEventListener("pointerdown", r2), o2.removeEventListener("pointerup", i2), o2.removeEventListener("pointercancel", i2), P.delete(o2), t2({ success: true, message: "Draggable region was deactivated" });
      });
    } });
    var L = Object.freeze({ __proto__: null, broadcast: function(e2, t2) {
      return f("events.broadcast", { event: e2, data: t2 });
    }, dispatch: r, off: function(e2, t2) {
      return window.removeEventListener(e2, t2), Promise.resolve({ success: true, message: "Event listener removed" });
    }, on: o });
    var S = null;
    var F = Object.freeze({ __proto__: null, checkForUpdates: function(t2) {
      return new Promise((n2, o2) => e(this, void 0, void 0, function* () {
        if (!t2) return o2({ code: "NE_RT_NATRTER", message: "Missing require parameter: url" });
        try {
          const e2 = yield fetch(t2);
          S = JSON.parse(yield e2.text()), !function(e3) {
            return !!(e3.applicationId && e3.applicationId == window.NL_APPID && e3.version && e3.resourcesURL);
          }(S) ? o2({ code: "NE_UP_CUPDMER", message: "Invalid update manifest or mismatching applicationId" }) : n2(S);
        } catch (e2) {
          o2({ code: "NE_UP_CUPDERR", message: "Unable to fetch update manifest" });
        }
      }));
    }, install: function() {
      return new Promise((t2, n2) => e(this, void 0, void 0, function* () {
        if (!S) return n2({ code: "NE_UP_UPDNOUF", message: "No update manifest loaded" });
        try {
          const e2 = yield fetch(S.resourcesURL), n3 = yield e2.arrayBuffer();
          yield g(window.NL_PATH + "/resources.neu", n3), t2({ success: true, message: "Update installed. Restart the process to see updates" });
        } catch (e2) {
          n2({ code: "NE_UP_UPDINER", message: "Update installation error" });
        }
      }));
    } });
    var I = Object.freeze({ __proto__: null, clear: function() {
      return f("clipboard.clear");
    }, getFormat: function() {
      return f("clipboard.getFormat");
    }, readImage: function() {
      return new Promise((e2, t2) => {
        f("clipboard.readImage").then((t3) => {
          t3 && (t3.data = i(t3.data)), e2(t3);
        }).catch((e3) => {
          t2(e3);
        });
      });
    }, readText: function() {
      return f("clipboard.readText");
    }, writeImage: function(e2) {
      const t2 = Object.assign({}, e2);
      return (null == e2 ? void 0 : e2.data) && (t2.data = s(e2.data)), f("clipboard.writeImage", t2);
    }, writeText: function(e2) {
      return f("clipboard.writeText", { data: e2 });
    } });
    var j = Object.freeze({ __proto__: null, extractFile: function(e2, t2) {
      return f("resources.extractFile", { path: e2, destination: t2 });
    }, getFiles: function() {
      return f("resources.getFiles");
    }, readBinaryFile: function(e2) {
      return new Promise((t2, n2) => {
        f("resources.readBinaryFile", { path: e2 }).then((e3) => {
          t2(i(e3));
        }).catch((e3) => {
          n2(e3);
        });
      });
    }, readFile: function(e2) {
      return f("resources.readFile", { path: e2 });
    } });
    var C = Object.freeze({ __proto__: null, getMethods: function() {
      return f("custom.getMethods");
    } });
    var M = false;
    exports.app = N, exports.clipboard = I, exports.computer = _, exports.custom = C, exports.debug = E, exports.events = L, exports.extensions = n, exports.filesystem = m, exports.init = function(t2 = {}) {
      if (t2 = Object.assign({ exportCustomMethods: true }, t2), !M) {
        if (l(), window.NL_ARGS.find((e2) => "--neu-dev-auto-reload" == e2) && o("neuDev_reloadApp", () => e(this, void 0, void 0, function* () {
          yield O("Reloading the application..."), location.reload();
        })), t2.exportCustomMethods && window.NL_CMETHODS && window.NL_CMETHODS.length > 0) for (const e2 of window.NL_CMETHODS) Neutralino.custom[e2] = (...t3) => {
          let n2 = {};
          for (const [e3, o2] of t3.entries()) n2 = "object" != typeof o2 || Array.isArray(o2) || null == o2 ? Object.assign(Object.assign({}, n2), { ["arg" + e3]: o2 }) : Object.assign(Object.assign({}, n2), o2);
          return f("custom." + e2, n2);
        };
        window.NL_CVERSION = "5.5.0", window.NL_CCOMMIT = "425c526c318342e0e5d0f17caceef2a53049eda4", M = true;
      }
    }, exports.os = h, exports.resources = j, exports.storage = y, exports.updater = F, exports.window = D;
  }
});
export default require_dist();
//# sourceMappingURL=@neutralinojs_lib.js.map
